import { Component, OnInit } from '@angular/core';
import { FlowbiteService } from '../../flowbite.service';
import { DocumentService } from './../../services/document.service';
import { MyDocuments, MyDocumentsy } from '../../models/document.model'; // ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ Document model
import { initFlowbite } from 'flowbite';
import Swal from 'sweetalert2';

@Component({
  selector: 'app-documents',
  standalone: false,
  templateUrl: './documents.component.html',
  styleUrls: ['./documents.component.css']  // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç styleUrl ‡πÄ‡∏õ‡πá‡∏ô styleUrls
})
export class DocumentsComponent implements OnInit {
  selectedDocument: MyDocuments | null = null;
  isEditModalOpen = false;
  isModalOpen = false;
  documents: MyDocumentsy[] = [];
  // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏´‡πâ document ‡πÉ‡∏ä‡πâ interface Documents
  document: MyDocuments = {
    Doc_name: '',
    DocDate: '',    // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô string
    DocDescription: '' // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏ô Documents interface (‡∏ï‡∏±‡∏ß D ‡∏ï‡∏±‡∏ß‡πÉ‡∏´‡∏ç‡πà)
  };

  constructor(
    private flowbiteService: FlowbiteService,
    private documentService: DocumentService
  ) {}
  
  ngOnInit(): void {
    this.flowbiteService.loadFlowbite(() => {
      initFlowbite();
    });
    this.loadDocuments();
  }
  loadDocuments() {
    this.documentService.getAllDocuments().subscribe(
      (res: any) => {
        console.log('üì¶ API raw response:', res);
    
        if (Array.isArray(res)) {
          // ‚úÖ ‡πÄ‡∏õ‡πá‡∏ô Array ‡∏ï‡∏£‡∏á‡πÜ
          this.documents = res;
        } else if (res?.$values) {
          // ‚úÖ ‡πÄ‡∏õ‡πá‡∏ô object ‡∏ó‡∏µ‡πà‡∏°‡∏µ $values
          this.documents = res.$values;
        } else {
          console.error('Invalid response format');  // ‚ö†Ô∏è ‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤ format ‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡πÑ‡∏ß‡πâ
        }
      },
      (err) => {
        console.error('API error:', err);
      }
    );
  }
  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏õ‡∏¥‡∏î modal
  openModal() {
    this.isModalOpen = true;
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏õ‡∏¥‡∏î modal
  closeModal() {
    this.isModalOpen = false;
  }

  // ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°
  onSubmit() {
    console.log('SUBMIT DATA:', this.document); // ‚úÖ Debug
  
    if (this.document.Doc_name && this.document.DocDate && this.document.DocDescription) {
      this.documentService.addDocument(this.document).subscribe(
        (response) => {
          console.log('Document added successfully', response);
          
          this.loadDocuments();

          // ‚úÖ SweetAlert ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
          Swal.fire({
            icon: 'success',
            title: 'Success',
            text: 'Document added successfully!',
            confirmButtonColor: '#3085d6',
            confirmButtonText: 'OK'
          });
  
          this.closeModal();
        },
        (error) => {
          console.error('Error adding document', error);
  
          // ‚ùå SweetAlert ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏£‡∏ì‡∏µ error ‡∏à‡∏≤‡∏Å server
          Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Something went wrong. Please try again later.',
            confirmButtonColor: '#d33',
            confirmButtonText: 'OK'
          });
        }
      );
    } else {
      // ‚ùó SweetAlert ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö
      Swal.fire('Error', 'Please fill all fields.', 'error');
    }
  }
  
}